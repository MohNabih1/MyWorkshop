====================
HOMEWORK P07 RESULTS
====================

Spring 2024


FULL CREDIT
===========

NOTE: These are measurements which may vary plus your opinions which may vary a LOT. We won't grade for "correctness", just completeness.

QUESTION 1: What Factor command line arguments did you use to achieve a 30 to 60 second runtime? Note: We're only interested in the "real" seconds for this question.


Time in ms         Bigint Values
      
 3.3            12341983591308976836
 0.5            103667773739245279036781
 0.6            38792691073186584079541
 1.9            23335073960029527159947
 0.5  		115342773083375138441712
 2.6   		89615432828121443469269
 1.2  		149003965211066359426480
 0.6     	140136045666459146416
 4.0    	8726382779747718874005
 3.8  		409691109030485036291146
 3.9     	140136045666459146419
 0.2  		409691109030485036291142
 2.1      	12341983591308976832
 2.5      	12341983591308976837
 0.8  		204889445540633809438884
 4.1    	2633022111220424607114
 2.1       	3810102159721699814
 8.2   		38792691073186584079546


The comomand line used on windoes shell: Measure-Command { java Factor }
 


QUESTION 2: Provide the full output (including the time command) for your program, with 1 to 16 threads. **Ensure that the result is the same for all 16 runs.** (The order of the solutions may vary.) With bash, you can run all of these with a single command if you like, adding whatever Factor command line arguments you identified in QUESTION 1: 

for i in {1..16} ; do time java Factor $i *bigint1* ... *bigintn* ; done



Example Timing (first 2 of 16 runs only on Antares - REPLACE this with your timing for 1 to 16 threads):

ricegf@antares$ for i in {1..16} ; do
> time java Factor $i 115342773083375138441712 89615432828121443469269 140136045666459146416 8726382779747718874005 409691109030485036291146 38792691073186584079549 140136045666459146419 33114517270146193529599 478713804955782741648
> done
Thread 0 solving 0-8
2 * 2 * 2 * 2 * 3 * 3 * 11 * 13 * 17 * 991 * 4125311 * 80595833 = 115342773083375138441712
19 * 1384847 * 47283371 * 72030923 = 89615432828121443469269
2 * 2 * 2 * 2 * 7 * 7 * 19 * 127 * 311 * 2711 * 87859063 = 140136045666459146416
3 * 3 * 3 * 5 * 7 * 83 * 17903 * 56519 * 109952239 = 8726382779747718874005
2 * 11731 * 209717 * 593851 * 140210449 = 409691109030485036291146
43 * 87277 * 92794831 * 111392989 = 38792691073186584079549
2113 * 4567 * 108761 * 133519949 = 140136045666459146419
7 * 23 * 1301 * 6793 * 155423 * 149740181 = 33114517270146193529599
2 * 2 * 2 * 2 * 3 * 3 * 83 * 7477 * 27487 * 194886001 = 478713804955782741648

real	0m30.911s
user	0m31.373s
sys	0m0.294s


Thread 0 solving 0-3
Thread 1 solving 4-8
2 * 2 * 2 * 2 * 3 * 3 * 11 * 13 * 17 * 991 * 4125311 * 80595833 = 115342773083375138441712
2 * 11731 * 209717 * 593851 * 140210449 = 409691109030485036291146
19 * 1384847 * 47283371 * 72030923 = 89615432828121443469269
43 * 87277 * 92794831 * 111392989 = 38792691073186584079549
2 * 2 * 2 * 2 * 7 * 7 * 19 * 127 * 311 * 2711 * 87859063 = 140136045666459146416
3 * 3 * 3 * 5 * 7 * 83 * 17903 * 56519 * 109952239 = 8726382779747718874005
2113 * 4567 * 108761 * 133519949 = 140136045666459146419
7 * 23 * 1301 * 6793 * 155423 * 149740181 = 33114517270146193529599
2 * 2 * 2 * 2 * 3 * 3 * 83 * 7477 * 27487 * 194886001 = 478713804955782741648

real	0m21.844s
user	0m34.172s
sys	0m0.414s



QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

Yes, adding more threads can speed up the program only to a certain point; that's is due to the precense of multi-processors. But beyond a certain point, adding more threads can lead to a slod-down in the performence of the program due overheads. That point of balance is determined by hardware limitatoins.








QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

Yes, adding more threads normally increases the system load. Because, threads consumes the cpu execution time and memory resources. So more threads leads to more system resoruces occupied by the operating system; thus increasing the system load. 









BONUS
=====

QUESTION 5: Time your version of Factor as you did for the full credit version. Is this additional layer of threading faster, slower, or roughly equivalent in performance? Why?

It was faster in performance. This is generally due to the parallel processing. Since multithreading utilizes multiple cpu cores at the same time. Thus leading to a faster performence. In addition, the load we're dealing with ( the number of Bigints) is not large.





YOUR Timing:




